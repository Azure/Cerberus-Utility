// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef CERBERUS_UTILITY_API_H_
#define CERBERUS_UTILITY_API_H_

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>


#ifdef __cplusplus
extern "C" {
#endif

#if defined (_WIN32) && defined (CERBERUS_LIBRARY_EXPORTS)
#define LIB_EXPORT __declspec(dllexport)
#else
#define LIB_EXPORT
#endif


#define CERBERUS_MAX_ERR_MSG_LEN 					512

#define CERBERUS_MAX_MSG_LEN						255


/**
 * print level flags.
 */
enum {
	CERBERUS_PRINT_FLAG_OFF		= 0x00,						/**< Turn off all print messages. */
	CERBERUS_PRINT_FLAG_ERROR	= 0x01,						/**< Enables error message prints. */
	CERBERUS_PRINT_FLAG_INFO 	= 0x02,						/**< Enables information message prints. */
	CERBERUS_PRINT_FLAG_TIME 	= 0x04,						/**< Enables time related message prints. */
	CERBERUS_PRINT_FLAG_ALL		= 0xFF,						/**< Enables all print messages. */
};

/**
 * Debug level flags.
 */
enum {
	CERBERUS_DEBUG_OFF			= 0x00,						/**< Turn off all debug messages. */
	CERBERUS_DEBUG_COMM			= 0x01,						/**< Enables communication debug messages. */
	CERBERUS_DEBUG_MCTP			= 0x02,						/**< Enables MCTP debug messages. */
	CERBERUS_DEBUG_CMD			= 0x04,						/**< Enables command debug messages. */
	CERBERUS_DEBUG_RESERVED 	= 0x08,						/**< Reserved for platform component debug messages. */
	CERBERUS_DEBUG_ALL			= 0xFF						/**< Enables all debug messages. */
};

/**
 * Maximum length of the encryption key generated by an unseal request.
 */
#define	CERBERUS_PROTOCOL_UNSEAL_MAX_KEY_LENGTH		32

/**
 * Valid padding schemes for RSA unsealing.
 */
enum cerberus_unseal_seed_padding {
	CERBERUS_UNSEAL_RSA_PKCS1_V15 = 0,						/**< RSA seed is encrypted using PKCS#1 v1.5 padding. */
	CERBERUS_UNSEAL_RSA_OAEP_SHA1 = 1,						/**< RSA seed is encrypted using OAEP with SHA1 padding. */
	CERBERUS_UNSEAL_RSA_OAEP_SHA256 = 2,					/**< RSA seed is encrypted using OAEP with SHA256 padding. */
};

/**
 * Extra processing to apply when deriving the ECDH seed for unsealing.
 */
enum cerberus_unseal_seed_processing {
	CERBERUS_UNSEAL_ECDH_RAW = 0,							/**< Seed is the raw ECDH output. */
	CERBERUS_UNSEAL_ECDH_SHA256 = 1,						/**< Seed is the SHA256 hash of the ECDH output. */
};

/**
 * Identifier for the type of key exchange algorithm.
 */
enum cerberus_key_exchange_algorithms {
	CERBERUS_KEYS_EXCHANGE_NONE = 0,						/**< None. */
	CERBERUS_ECDHE_KEY_EXCHANGE = 1,						/**< ECDHE key exchange. */
};

/**
 * Identifier for the type of Cerberus device reset.
 */
enum cerberus_reset_config_type {
	CERBERUS_RESET_CONFIG_BYPASS = 0,						/**< Reset to bypass mode. */
	CERBERUS_RESET_CONFIG_DEFAULTS,							/**< Reset to factory default state. */
	CERBERUS_RESET_CONFIG_PLATFORM,							/**< Clear platform configuration. */
	CERBERUS_RESET_CONFIG_CFM,								/**< Clear CFM configuration. */
	CERBERUS_RESET_CONFIG_INTRUSION,						/**< Reset intrusion state. */
};

/**
 * Identifier for port state.
 */
enum cerberus_port_state {
	CERBERUS_PORT_STATE_ACTIVE = 0,							/**< Port is in active mode. */
	CERBERUS_PORT_STATE_BYPASS,								/**< Port is in bypass mode. */
	CERBERUS_PORT_STATE_RECOVERY,							/**< Port is in recovery mode. */
	CERBERUS_PORT_STATE_UNKNOWN,							/**< Port is in an unknown mode. */
};

/**
 * Host processor reset states.
 */
enum host_reset_state {
	HOST_PROCESSOR_OUT_OF_RESET = 0,						/**< The host processor is running. */
	HOST_PROCESSOR_HELD_IN_RESET,							/**< The host is being held in reset by Cerberus. */
	HOST_PROCESSOR_NOT_HELD_IN_RESET,						/**< The host is not being held in reset, but is not yet running. */
	NUM_HOST_PROCESSOR_STATES								/**< Number of host processor states. */
};

/**
 * Identifier for intrusion state.
 */
enum cerberus_intrusion_state {
	CERBERUS_INTRUSION_STATE_INTRUDED = 0,					/**< Chassis is in intruded state. */
	CERBERUS_INTRUSION_STATE_NOT_INTRUDED,					/**< Chassis is in non-intruded state. */
	CERBERUS_INTRUSION_STATE_UNKNOWN,						/**< Chassis is in an unknown intrusion state. */
};

/**
 * Identifier for public interface types supported by Cerberus interface.
 * Public Interface range: 0x00 - 0x3FF
 * Vendor Specific Interface range: 0x400 - 0xFFF
 */
enum {
	CERBERUS_INTF_AARDVARK = 0,								/**< Aardvark interface. */
	CERBERUS_INTF_MBOX,										/**< Mailbox interface */
	CERBERUS_VENDOR_INTF_START = 0x400						/**< Maximum Number of Public Interface types. */
};

/**
 * Component attestation statuses.
 */
enum {
	CERBERUS_COMP_AUTHENTICATED = 0,						/**< Device successfully attested. */
	CERBERUS_COMP_UNIDENTIFIED,								/**< Device failed or didn't undergo discovery. */
	CERBERUS_COMP_NEVER_ATTESTED,							/**< Device never attested. */
	CERBERUS_COMP_READY_FOR_ATTESTATION,					/**< Device discovered but not attested or failed attestation. */
	CERBERUS_COMP_ATTESTATION_FAILED,						/**< Device failed previous attestation attempt. */
	NUM_CERBERUS_COMP_STATUS								/**< Number of update types. */
};

#pragma pack(push, 1)

/**
 * Debug log entry timestamp identifier
 */
enum logging_timestamp_type {
	CERBERUS_LOG_TIMESTAMP_BOOT = 0,						/**< Timestamp in the log since device booted */
	CERBERUS_LOG_TIMESTAMP_RTC,								/**< Timestamp in the log reported by a RTC */
};

/**
 * Debug log entry timestamp
 * CERBERUS_LOG_TIMESTAMP_BOOT type provides a timestamp since device booted.  For this type, Year and Month will
 * always report 0.
 * CERBERUS_LOG_TIMESTAMP_RTC type provides a timestamp reported by RTC on the device. For this type, all fields
 * will be populated with values reported by the RTC.
 */
struct logging_entry_timestamp {
	uint64_t time_ms;										/**< raw timestamp reported in milliseconds */
	enum logging_timestamp_type type;						/**< timestamp type reported by the device */
	uint16_t year;											/**< Year reported in the entry timestamp */
	uint8_t month;											/**< Month reported in the entry timestamp */
	uint16_t days;											/**< Days reported in the entry timestamp */
	uint8_t hours;											/**< Hours reported in the entry timestamp */
	uint8_t minutes;										/**< Minutes reported in the entry timestamp */
	uint8_t seconds;										/**< Seconds reported in entry timestamp */
	uint16_t milliseconds;									/**< Milliseconds reported in the entry timestamp */
};

/**
 * Debug log entry.
 */
struct logging_debug_entry {
	uint32_t entry_id;										/**< Debug log entry ID */
	uint8_t severity;										/**< Severity */
	uint8_t component;										/**< Component */
	uint8_t msg_index;										/**< Message index */
	uint32_t arg1;											/**< Optional argument 1 */
	uint32_t arg2;											/**< Optional argument 2 */
	struct logging_entry_timestamp time;					/**< Log entry timestamp */
};

/**
 * List of debug log entries
 */
struct logging_debug_list {
	struct logging_debug_entry list;						/**< Debug log entry in the list */
	struct logging_debug_list *next;						/**< Next element in the list */
};

/**
 * TCG log entry.
 */
struct logging_tcg_entry {
	uint32_t entry_id;										/**< Entry ID */
	uint32_t event_type;									/**< TCG event type */
	uint32_t measurement_type;								/**< PCR and measurement index */
	uint32_t digest_count;									/**< Number of digests */
	uint16_t digest_algorithm_id;							/**< ID of hashing algorithm */
	uint8_t digest[32];										/**< Value extended to measurement */
	uint32_t measurement_size;								/**< Measurement size */
	uint8_t measurement[32];								/**< Resultant measurement */
};
#pragma pack(pop)

/**
 * Digests for a certificate chain.
 */
struct cerberus_digests {
	uint8_t *digest;										/**< List of digests */
	size_t num_digest;										/**< The number of digests in the list */
	size_t digest_len;										/**< The length of each digest */
};

/**
 * SVN node contents.
 */
struct cerberus_svn {
	uint8_t *svn_data;									/**< Data for each SVN node */
	size_t svn_length;									/**< Length of data */
};

/**
 * List to hold SVN nodes.
 */
struct cerberus_svns {
	struct cerberus_svn *list;							/**< List holding SVN nodes */
	size_t num_svn;										/**< The number of SVNs in the list */
};

/**
 * Certificate
 */
struct cerberus_cert {
	uint8_t *cert;											/**< Certificate buffer. */
	size_t cert_len;										/**< Certificate length. */
};

/**
 * Certificate chain
 */
struct cerberus_cert_chain {
	struct cerberus_cert *cert;								/**< Certificate. */
	uint8_t num_cert;										/**< Number of certificates in chain. */
};

/**
 * Cerberus device IDs
 */
struct cerberus_device_id {
	uint16_t vendor_id;										/**< Vendor ID */
	uint16_t device_id;										/**< Device ID */
	uint16_t subsystem_vid;									/**< Subsystem vendor ID */
	uint16_t subsystem_id;									/**< Subsystem ID */
};

/**
 * Cerberus log size
 */
struct cerberus_log_info {
	uint32_t debug_log;										/**< Debug log size */
	uint32_t attestation_log;								/**< Attestation log size */
	uint32_t tamper_log;									/**< Tamper log size */
};

/**
 * Attestation status for component.
 */
struct cerberus_component_status {
	uint8_t status;											/**< Component status */
	char *status_str;										/**< Component status entry */
};

/**
 * Attestation statuses for components in active CFM.
 */
struct cerberus_component_statuses {
	struct cerberus_component_status *statuses;				/**< List of component statuses in order of PCD */
	size_t num_status;										/**< The number of statuses in the list */
};

/**
 * Heap usage statistics for the device.
 *
 * A negative value indicates the value is unknown or unsupported by the device.
 */
struct cerberus_heap {
	int total;												/**< Total number of bytes in the heap. */
	int free;												/**< Current number of free bytes. */
	int min_free;											/**< Minimum number of free bytes. */
	int free_blocks;										/**< Current number of free heap blocks. */
	int max_block;											/**< Size of the largest free block. */
	int min_block;											/**< Size of the smallest free block. */
};

/**
 * Capabilities of a Cerberus device.
 */
struct cerberus_device_caps {
	int max_message_timeout;								/**< Maximum timeout for a standard request */
	int max_crypto_timeout;									/**< Maximum timeout for a cryptographic request */
	uint16_t max_message_body;								/**< Maximum message body size supported */
	uint16_t max_packet_payload;							/**< Maximum packet payload size supported */
	uint8_t device_info;									/**< Device role and authentication */
	uint8_t pk_key_strength;								/**< Asymmetric key strength */
	uint8_t enc_key_strength;								/**< Symmetric key strength */
};

/**
 * CFM/PCD supported components
 */
struct cerberus_components {
	char **component_str;									/**< List of component name strings */
	size_t num_components;									/**< Number of components in list */
};

/**
 * Routing table entry
 */
struct cerberus_routing_table_entry {
	uint8_t entry_type;										/**< Entry type */
	uint8_t starting_eid;									/**< Starting EID */
	uint8_t eid_range_size;									/**< Size of EID range */
	uint8_t address;										/**< Physical address */
};

/**
 * Routing table entries
 */
struct cerberus_routing_table {
	struct cerberus_routing_table_entry *entries;			/**< List of routing table entries */
	size_t num_entries;										/**< Number of entries in list */
};

/**
 * Interface for communicating with Cerberus.
 */
struct cerberus_interface;

/**
 * Configurable parameters for all Cebrerus utility interfaces.
 */
struct cerberus_interface_param;

LIB_EXPORT int cerberus_get_supported_interfaces (uint32_t **intf_list, size_t *length,
	char *err_buf, size_t err_buf_size);

LIB_EXPORT struct cerberus_interface* cerberus_interface_init (uint32_t intf_type,
	struct cerberus_interface_param *param, char *err_buf, size_t err_buf_size);
LIB_EXPORT void cerberus_interface_deinit (struct cerberus_interface *intf);

LIB_EXPORT const char* cerberus_get_last_error (struct cerberus_interface *intf);
LIB_EXPORT const char* cerberus_get_utility_version ();
LIB_EXPORT unsigned long cerberus_get_cpu_time_ms ();
LIB_EXPORT void cerberus_sleep_ms (unsigned long time_ms);
LIB_EXPORT void cerberus_free (void *buffer);

LIB_EXPORT int cerberus_remote_device_connect (struct cerberus_interface *intf);
LIB_EXPORT int cerberus_detect_device (struct cerberus_interface *intf);

LIB_EXPORT int cerberus_find_protocol_version (struct cerberus_interface *intf);
LIB_EXPORT int cerberus_get_device_capabilities (struct cerberus_interface *intf,
	struct cerberus_device_caps *capabilities);

LIB_EXPORT int cerberus_read_file (struct cerberus_interface *intf, const char *name,
	uint8_t **buffer, size_t *length);
LIB_EXPORT int cerberus_write_file (struct cerberus_interface *intf, const char *filename,
	const uint8_t *buffer, size_t length);

LIB_EXPORT int cerberus_get_fwversion (struct cerberus_interface *intf, uint8_t area,
	uint8_t *version, size_t version_len);
LIB_EXPORT int cerberus_fwupdate (struct cerberus_interface *intf, const char *name);

LIB_EXPORT int cerberus_get_pfm_reboot_action (struct cerberus_interface *intf, uint8_t pfm_port,
	uint32_t *reboot_action, char **action_str);
LIB_EXPORT int cerberus_pfm_activate (struct cerberus_interface *intf, uint8_t port,
	uint8_t activate_setting);
LIB_EXPORT int cerberus_pfm_update (struct cerberus_interface *intf, const char *filename,
	uint8_t port, uint8_t activate_setting);

LIB_EXPORT int cerberus_get_pfm_id (struct cerberus_interface *intf,
	uint8_t port, uint8_t pfm_region, uint32_t *pfm_id);
LIB_EXPORT int cerberus_get_pfm_platform_id (struct cerberus_interface *intf,
	uint8_t port, uint8_t pfm_region, char **pfm_platform_id);
LIB_EXPORT int cerberus_get_pfm_supported_fw (struct cerberus_interface *intf, uint8_t port,
	uint8_t pfm_region, uint8_t **supported_fw_versions, size_t *total_len);
LIB_EXPORT int cerberus_print_pfm_supported_fw (struct cerberus_interface *intf,
	uint8_t port, uint8_t pfm_region);
LIB_EXPORT int cerberus_check_fw_pfm_support (struct cerberus_interface *intf,
	uint8_t port, uint8_t pfm_region, const char *fw_version);
LIB_EXPORT int cerberus_get_pfm_supported_fw_for_type (struct cerberus_interface *intf,
	uint8_t port, uint8_t pfm_region, const char *fw_type, uint8_t **supported_fw_versions,
	size_t *total_len);
LIB_EXPORT int cerberus_print_pfm_supported_fw_for_type (struct cerberus_interface *intf,
	uint8_t port, uint8_t pfm_region, const char *fw_type);
LIB_EXPORT int cerberus_check_fw_pfm_support_for_type (struct cerberus_interface *intf,
	uint8_t port, uint8_t pfm_region, const char *fw_type, const char *fw_version);

LIB_EXPORT int cerberus_check_bypass_mode (struct cerberus_interface *intf, uint8_t pfm_port,
	bool *bypass);
LIB_EXPORT int cerberus_get_port_state (struct cerberus_interface *intf, uint8_t pfm_port,
	uint8_t *state);

LIB_EXPORT int cerberus_get_cfm_supported_components (struct cerberus_interface *intf,
	uint8_t cfm_region, struct cerberus_components *components);
LIB_EXPORT int cerberus_print_cfm_supported_components (struct cerberus_interface *intf,
	uint8_t cfm_region);
LIB_EXPORT int cerberus_get_pcd_supported_components (struct cerberus_interface *intf,
	struct cerberus_components *components);
LIB_EXPORT int cerberus_print_pcd_supported_components (struct cerberus_interface *intf);
LIB_EXPORT void cerberus_free_comp_list (struct cerberus_components *components);

LIB_EXPORT int cerberus_pcd_update (struct cerberus_interface *intf, const char *filename);
LIB_EXPORT int cerberus_cfm_update (struct cerberus_interface *intf, const char *filename,
	uint8_t activate_setting);
LIB_EXPORT int cerberus_cfm_activate (struct cerberus_interface *intf, uint8_t activate_setting);
LIB_EXPORT int cerberus_get_cfm_id (struct cerberus_interface *intf, uint8_t manifest_region,
	uint32_t *manifest_id);
LIB_EXPORT int cerberus_get_cfm_platform_id (struct cerberus_interface *intf,
	uint8_t manifest_region, char **cfm_platform_id);
LIB_EXPORT int cerberus_get_pcd_id (struct cerberus_interface *intf, uint32_t *manifest_id);
LIB_EXPORT int cerberus_get_pcd_platform_id (struct cerberus_interface *intf,
	char **pcd_platform_id);

LIB_EXPORT int cerberus_get_log_info (struct cerberus_interface *intf,
	struct cerberus_log_info *log);
LIB_EXPORT int cerberus_debug_log_clear (struct cerberus_interface *intf);
LIB_EXPORT int cerberus_attestation_log_clear (struct cerberus_interface *intf);
LIB_EXPORT int cerberus_debug_log_read (struct cerberus_interface *intf, char **debug_log,
	size_t *debug_len);
LIB_EXPORT int cerberus_export_debug_log_file (struct cerberus_interface *intf,
	const char *filename);
LIB_EXPORT int cerberus_debug_log_read_range (struct cerberus_interface *intf, int start, int end,
	char **debug_log, size_t *debug_len);
LIB_EXPORT int cerberus_export_debug_log_range_file (struct cerberus_interface *intf, int start,
	int end, const char *filename);
LIB_EXPORT int cerberus_debug_log_read_entries (struct cerberus_interface *intf,
	struct logging_debug_list **list);
LIB_EXPORT void cerberus_free_log_entries (struct logging_debug_list *list);

LIB_EXPORT int cerberus_attestation_log_read (struct cerberus_interface *intf,
	struct logging_tcg_entry **entries, size_t *num_entries);
LIB_EXPORT int cerberus_print_tcg_log (struct cerberus_interface *intf);
LIB_EXPORT int cerberus_get_pcr_measurement (struct cerberus_interface *intf, uint8_t pcr_num,
	uint8_t **measurement);
LIB_EXPORT int cerberus_export_tcg_log_through_utility_memory (struct cerberus_interface *intf,
	char **tcg_log, size_t *log_len);
LIB_EXPORT int cerberus_export_tcg_log_through_utility_file (struct cerberus_interface *intf,
	const char *filename);
LIB_EXPORT int cerberus_export_tcg_log_through_fw_memory (struct cerberus_interface *intf,
	char **tcg_log, size_t *log_len);
LIB_EXPORT int cerberus_export_tcg_log_through_fw_file (struct cerberus_interface *intf,
	const char *filename);
LIB_EXPORT int cerberus_export_tcg_log_memory (struct cerberus_interface *intf,
	char **tcg_log,	size_t *log_len);
LIB_EXPORT int cerberus_export_tcg_log_file (struct cerberus_interface *intf, const char *filename);

LIB_EXPORT int cerberus_get_digests (struct cerberus_interface *intf, uint8_t slot_num,
	struct cerberus_digests *digests);
LIB_EXPORT int cerberus_get_digests_with_key_exchange (struct cerberus_interface *intf,
	uint8_t slot_num, struct cerberus_digests *digests,
	enum cerberus_key_exchange_algorithms key_exchange_algo);
LIB_EXPORT void cerberus_free_digests (struct cerberus_digests *digests);

LIB_EXPORT int cerberus_get_svn_number (struct cerberus_interface *intf, struct cerberus_svns *svns);
LIB_EXPORT void cerberus_free_svns (struct cerberus_svns *svns);

LIB_EXPORT int cerberus_get_cert (struct cerberus_interface *intf, uint8_t slot_num,
	uint8_t cert_num, struct cerberus_cert *cert);
LIB_EXPORT int cerberus_get_cert_chain (struct cerberus_interface *intf, uint8_t slot_num,
	struct cerberus_cert_chain *chain);
LIB_EXPORT int cerberus_get_cert_chain_with_key_exchange (struct cerberus_interface *intf,
	uint8_t slot_num, struct cerberus_cert_chain *chain,
	enum cerberus_key_exchange_algorithms key_exchange_algo);
LIB_EXPORT void cerberus_free_cert (struct cerberus_cert *cert);
LIB_EXPORT void cerberus_free_cert_chain (struct cerberus_cert_chain *chain);

LIB_EXPORT int cerberus_message_unseal_rsa (struct cerberus_interface *intf, const uint8_t *seed,
	uint16_t seed_len, enum cerberus_unseal_seed_padding seed_padding, const uint8_t *cipher,
	uint16_t cipher_len, const uint8_t *hmac, const uint8_t sealing[5][64], uint8_t *encryption_key,
	uint16_t *encryption_key_len);
LIB_EXPORT int cerberus_message_unseal_ecc (struct cerberus_interface *intf, const uint8_t *seed,
	uint16_t seed_len, enum cerberus_unseal_seed_processing seed_processing, const uint8_t *cipher,
	uint16_t cipher_len, const uint8_t *hmac, const uint8_t sealing[5][64], uint8_t *encryption_key,
	uint16_t *encryption_key_len);

LIB_EXPORT int cerberus_get_devid_csr (struct cerberus_interface *intf, const char *filename);
LIB_EXPORT int cerberus_send_signed_ca_certificate (struct cerberus_interface *intf,
	uint8_t cert_num, const char *name);
LIB_EXPORT int cerberus_get_riot_cert_state (struct cerberus_interface *intf, uint32_t *cert_state,
	uint32_t *error_data);

LIB_EXPORT int cerberus_get_intrusion_state (struct cerberus_interface *intf, uint8_t *state);

LIB_EXPORT int cerberus_reset_default_configuration (struct cerberus_interface *intf,
	char *token_file, bool load_file);
LIB_EXPORT int cerberus_reset_bypass_configuration (struct cerberus_interface *intf,
	char *token_file, bool load_file);
LIB_EXPORT int cerberus_reset_platform_configuration (struct cerberus_interface *intf,
	char *token_file, bool load_file);
LIB_EXPORT int cerberus_reset_intrusion_configuration (struct cerberus_interface *intf,
	char *token_file, bool load_file);
LIB_EXPORT int cerberus_reset_component_configuration  (struct cerberus_interface *intf,
	char *token_file, bool load_file);

LIB_EXPORT int cerberus_get_host_state (struct cerberus_interface *intf, uint8_t port,
	uint8_t *state);
LIB_EXPORT const char* cerberus_get_host_state_str (struct cerberus_interface *intf,
	uint8_t host_state);

LIB_EXPORT int cerberus_recovery_image_update (struct cerberus_interface *intf,
	uint8_t recovery_port, const char *name);
LIB_EXPORT int cerberus_get_recovery_image_version (struct cerberus_interface *intf,
	uint8_t recovery_port, uint8_t *version, size_t length);

LIB_EXPORT int cerberus_get_device_info (struct cerberus_interface *intf, uint8_t *buffer,
	size_t *length);
LIB_EXPORT int cerberus_get_device_id (struct cerberus_interface *intf,
	struct cerberus_device_id *ids);
LIB_EXPORT int cerberus_get_reset_counter (struct cerberus_interface *intf, uint8_t type,
	uint8_t port, uint16_t *counter);

LIB_EXPORT int cerberus_setup_encrypted_channel (struct cerberus_interface *intf, uint8_t *root_ca,
	size_t root_ca_len);
LIB_EXPORT int cerberus_close_encrypted_channel (struct cerberus_interface *intf);

LIB_EXPORT int cerberus_attestation_challenge (struct cerberus_interface *intf, uint8_t *root_ca,
	size_t root_ca_len, uint8_t *pmr0_buf, size_t pmr0_buf_len);

LIB_EXPORT void cerberus_free_components_status (struct cerberus_component_statuses *results);
LIB_EXPORT int cerberus_get_components_status (struct cerberus_interface *intf,
	struct cerberus_component_statuses *results);
LIB_EXPORT int cerberus_print_component_status (struct cerberus_interface *intf);

LIB_EXPORT int cerberus_test_error_msg (struct cerberus_interface *intf);

LIB_EXPORT int cerberus_get_mctp_routing_table (struct cerberus_interface *intf,
	struct cerberus_routing_table *routing_table);
LIB_EXPORT int cerberus_print_mctp_routing_table (struct cerberus_interface *intf);

/* Diagnostic commands. */

LIB_EXPORT int cerberus_current_heap_usage (struct cerberus_interface *intf,
	struct cerberus_heap *heap);


#ifdef __cplusplus
}
#endif

#endif // CERBERUS_UTILITY_API_H_
